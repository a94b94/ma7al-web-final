import type { NextApiRequest, NextApiResponse } from "next";
import dbConnect from "@/lib/dbConnect";
import LocalInvoice from "@/models/LocalInvoice";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await dbConnect();

  const year = parseInt(req.query.year as string);
  if (!year || isNaN(year)) {
    return res.status(400).json({ success: false, message: "يرجى تحديد سنة صحيحة" });
  }

  try {
    const invoices = await LocalInvoice.find({
      createdAt: {
        $gte: new Date(`${year}-01-01T00:00:00.000Z`),
        $lte: new Date(`${year}-12-31T23:59:59.999Z`),
      },
    }).lean();

    const productMap: Record<string, number> = {};

    for (const invoice of invoices) {
      if (Array.isArray(invoice.cart)) {
        for (const item of invoice.cart) {
          if (item.name && item.quantity) {
            if (!productMap[item.name]) productMap[item.name] = 0;
            productMap[item.name] += item.quantity;
          }
        }
      }
    }

    const sorted = Object.entries(productMap)
      .map(([name, quantity]) => ({ name, quantity }))
      .sort((a, b) => b.quantity - a.quantity)
      .slice(0, 10);

    res.json({ success: true, data: sorted });
  } catch (err) {
    res.status(500).json({ success: false, message: "خطأ في التحليل", error: err });
  }
}
